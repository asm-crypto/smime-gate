#!/bin/bash

# S/MIME Tool 1.0, simple tool for processing S/MIME messages
# Author: Tomasz Pieczerak (tphaster)

set -e
VERSION="1.0"
ALG="-aes128"

# display usage info function
usage(){
    cat 1>&2 <<EOT
Usage: `basename $0` [ACTION] [OPTION]... [MSG]

Try '`basename $0` --help' for more options.
EOT
}

# check whether file is readable
readable(){
    if [ "x$1" = "x" ]; then
        echo "`basename $0`: no $2 given" 1>&2
        usage
        exit 1
    fi

    FILE=`readlink -f -- "$1"`

    if [ ! -r "$1" ]; then
        echo "`basename $0`: can't read $2 file" 1>&2
        exit 1
    fi

    echo -n "$FILE"
}

# check number of arguments
if [ $# -eq 0 ]; then
    echo "`basename $0`: missing ACTION and MSG" 1>&2
    usage
    exit 1
fi

# display help on "-h" or "--help" option (it must be the first option)
if [ "x$1" = "x--help" -o "x$1" = "x-h" ]; then
    cat <<EOT
S/MIME Tool $VERSION, simple tool for processing S/MIME messages (uses OpenSSL)
Usage: `basename $0` [ACTION] [OPTION]... [MSG]

MSG is a file containing MIME message, it's mandatory. You can set encryption
algorithm by setting ALG environment variable.

Startup:
    -h, --help  print this help.

Action:
    -encrypt    encrypt MIME message.
    -decrypt    decrypt S/MIME message.
    -sign       sign MIME message.
    -verify     verify signed S/MIME message.

Options:
    -cert CERT  recipient certificate.
    -key KEY    private key used to decrypt or sign.
    -pass PASS  password to private key.
    -ca CA      CA certificate.
    -out FILE   print output to FILE.
    -out -      print output to stdout. [default]

Mail bug reports and suggestions to <tphaster AT gmail.com>.
EOT
    exit 0
fi

# print program version on "-V" or "--version" option
if [ "x$1" = "x--version" -o "x$1" = "x-V" ]; then
    cat <<EOT
S/MIME Tool $VERSION

Copyright (C) 2011-2014 Tomasz Pieczerak
License GPLv3+: GNU GPL version 3 or later
<http://www.gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written and maintained by Tomasz Pieczerak <tphaste AT gmail.com>.
Please send bug reports and questions to <tphaster AT gmail.com>.
EOT
    exit 0
fi

# determine action
case $1 in
    -encrypt) ACTION=e; shift;;
    -decrypt) ACTION=d; shift;;
    -sign)    ACTION=s; shift;;
    -verify)  ACTION=v; shift;;
    *)
        echo "`basename $0`: bad ACTION" 1>&2
        usage
        exit 1
        ;;
esac

# parse options
while [ "x$1" != "x" ]
do
    case $1 in
        --) shift; break;;      # end of options
        -cert)                  # recipient's certificate
            shift
            CERT="$1"
            shift
            ;;
        -key)                   # private key
            shift
            KEY="$1"
            shift
            ;;
        -pass)                  # private key password
            shift
            PASS="$1"
            shift
            ;;
        -ca)                    # ca certificate
            shift
            CA="$1"
            shift
            ;;
        -out)                   # set output file
            shift
            if [ "x$1" = "x-"  ];then
                OUTPUT=""
            else
                OUTPUT="$1"
            fi
            shift
            ;;
        -*)
            echo "`basename $0`: unknown OPTION $1" 1>&2
            usage
            exit 1
            ;;
        *)
            break;;
    esac
done

# check whether there is any argument left (there have to be)
if [ "x$1" = "x" ]; then
    echo "`basename $0`: missing MSG" 1>&2
    usage
    exit 1
fi

# prepare input file
MSG=`readable "$1" "message"`

# set output stream
if [ "$OUTPUT" ]; then
    exec 1>"$OUTPUT"
fi

# delete temporary file on exit
trap "rm -f $MSG.tmp" EXIT INT TERM

# extract MIME message
(
    while read line
    do
        case $line in
            MIME-Version:*)
                echo -n "$line" > "$MSG.tmp"
                break;;
            *) 
                echo -e -n "$line\n";;
        esac
    done

    while read line
    do
        echo -n "$line" >> "$MSG.tmp"
    done
) < $MSG

# check if MIME header was present in MSG file
if [ ! -f "$MSG.tmp" ]; then
    echo "`basename $0`: $MSG is not a MIME formated message" 1>&2
fi

# adjust line endings to unix-like format
sed -i 's/\r/\n/g' "$MSG.tmp"

# check whether there are enough parameters
CERT=`readable "$CERT" "certificate"`

case $ACTION in
    [ds])      # decrypt/signing: key, pass
        KEY=`readable "$KEY" "private key"`
        if [ "x$PASS" = "x" ]; then
            echo "`basename $0`: missing password for private key" 1>&2
            usage
            exit 1
        fi
        ;;
    v)          # verify: ca
        CA=`readable "$CA" "CA certificate"`
        ;;
esac

set +e

# process message
case $ACTION in
    e)      # encryption
        openssl smime -encrypt $ALG -in $MSG.tmp $CERT 2>/dev/null || exit 1
        ;;
    d)      # decryption
        openssl smime -decrypt -inkey $KEY -recip $CERT -passin pass:$PASS -in $MSG.tmp 2>/dev/null || exit 1
        ;;
    s)      # signing
        openssl smime -sign -signer $CERT -inkey $KEY -passin pass:$PASS -in $MSG.tmp 2>/dev/null || exit 1
        ;;
    v)      # verify
        openssl smime -verify -in $MSG.tmp -recip $CERT -CAfile $CA 2>/dev/null || exit 1
        echo -e -n "\n=== Verification successful ===\n"
        ;;
esac | sed -e 's/$/\r/' -e 's/\r\r/\r/'

status=${PIPESTATUS[0]}     # get openssl exit status

# return appropriate exit status on openssl error
exit $status

